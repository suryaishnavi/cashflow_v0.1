type AppUser
  @model
  @auth(rules: [{ allow: private, provider: iam }, { allow: owner }]) {
  id: ID! @primaryKey(sortKeyFields: ["phoneNumber"])
  name: String!
  owner: String!
  emailId: AWSEmail!
  phoneNumber: AWSPhone!
  appUserSubscriptionDetails: AppUserSubscriptionDetails!
  circles: [Circle] @hasMany(indexName: "byAppUser", fields: ["id"])
}

type AppUserSubscriptionDetails {
  startDate: AWSDate!
  endDate: AWSDate!
  isActive: Boolean!
  subscribed: Boolean!
}

type Circle @model @auth(rules: [{ allow: owner }]) {
  id: ID! @primaryKey(sortKeyFields: ["sub"])
  sub: String!
  circleName: String!
  day: WeekDay!
  appuserID: ID! @index(name: "byAppUser")
  cities: [City] @hasMany(indexName: "byCircle", fields: ["id"])
  customers: [Customer] @hasMany(indexName: "byCircle", fields: ["id"])
}

type LoanSerialNumber @model @auth(rules: [{ allow: owner }]) {
  serialNumber: String!
  circleID: ID! @index(name: "byCircle")
}

enum WeekDay {
  MONTHLY
  DAILY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

type City @model @auth(rules: [{ allow: owner }]) {
  id: ID! @primaryKey(sortKeyFields: ["circleID"])
  name: String!
  circleID: ID! @index(name: "byCircle")
  customer: [Customer] @hasMany
}

type Customer @model @auth(rules: [{ allow: owner }]) {
  id: ID! @primaryKey(sortKeyFields: ["sub"])
  sub: String!
  uId: String!
  customerName: String!
  phone: AWSPhone!
  address: String!
  loanIdentity: [String]!
  oldLoanInfo: OldLoanDetails
  dateOfCreation: AWSDate!
  newLoanAddedDate: AWSDate
  paymentInfo: PaymentDetails
  customerStatus: CustomerStatus
  city: City! @belongsTo
  longitude: Float
  latitude: Float
  circleID: ID! @index(name: "byCircle")
  loans: [Loan] @hasMany(indexName: "byCustomer", fields: ["id"])
}

type OldLoanDetails {
  id: String!
  customerID: String!
  totalCollectedAmount: Int!
  loanIdentity: String!
  ClosedDate: AWSDate!
}


type PaymentDetails {
  id: String!
  customerID: String!
  emiAmount: Int!
  paidAmount: Int!
  loanIdentity: String!
  paidDate: AWSDate!
}

enum CustomerStatus {
  ACTIVE
  CLOSED
}

type Loan @model @auth(rules: [{ allow: owner }]) {
  id: ID! @primaryKey(sortKeyFields: ["sub"])
  sub: String!
  givenAmount: Int!
  collectibleAmount: Int!
  paidAmount: Int!
  emiType: EmiType!
  emiAmount: Int!
  totalEmis: Int!
  paidEmis: Int!
  dateOfCreation: AWSDate!
  nextDueDate: AWSDate!
  loanIdentity: String!
  endDate: AWSDate!
  status: LoanStatus!
  reasonForLoanTermination: String
  customerID: ID! @index(name: "byCustomer")
  emis: [Emi] @hasMany(indexName: "byLoan", fields: ["id"])
  ttl: AWSTimestamp
}

enum EmiType {
  DAILY
  WEEKLY
  MONTHLY
}

enum LoanStatus {
  ACTIVE
  CLOSED
}

type Emi @model @auth(rules: [{ allow: owner }]) {
  id: ID! @primaryKey(sortKeyFields: ["sub"])
  emiNumber: Int!
  sub: String!
  customerName: String!
  loanIdentity: String!
  city: String!
  emiAmount: Int!
  paidDate: AWSDate
  updatedDate: AWSDate
  paidAmount: Int
  initialAmount: Int
  status: EmiStatus!
  dueDate: AWSDate!
  isExtraEmi: Boolean
  loanID: ID! @index(name: "byLoan")
  ttl: AWSTimestamp
}

enum EmiStatus {
  NOTPAID
  PAID
  OVERDUE
}

type SubscriptionsDetails
  @model
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: owner, operations: [read] }
    ]
  ) {
  id: ID! @primaryKey(sortKeyFields: ["startDate"])
  startDate: AWSDate!
  endDate: AWSDate!
  isActive: Boolean!
  appUser: String
}

type Mutation {
  sendEmail(msg: String): String @function(name: "sendOTPtoDelete-${env}")
}